// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/storage.go -destination=internal/mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	collector "github.com/paranoiachains/metrics/internal/collector"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Return mocks base method.
func (m *MockDatabase) Return(ctx context.Context, mtype, id string) (*collector.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Return", ctx, mtype, id)
	ret0, _ := ret[0].(*collector.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Return indicates an expected call of Return.
func (mr *MockDatabaseMockRecorder) Return(ctx, mtype, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Return", reflect.TypeOf((*MockDatabase)(nil).Return), ctx, mtype, id)
}

// Update mocks base method.
func (m *MockDatabase) Update(ctx context.Context, mtype, id string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, mtype, id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDatabaseMockRecorder) Update(ctx, mtype, id, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabase)(nil).Update), ctx, mtype, id, value)
}

// UpdateBatch mocks base method.
func (m *MockDatabase) UpdateBatch(ctx context.Context, metrics collector.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatch", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockDatabaseMockRecorder) UpdateBatch(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockDatabase)(nil).UpdateBatch), ctx, metrics)
}

// MockFileHandler is a mock of FileHandler interface.
type MockFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlerMockRecorder
	isgomock struct{}
}

// MockFileHandlerMockRecorder is the mock recorder for MockFileHandler.
type MockFileHandlerMockRecorder struct {
	mock *MockFileHandler
}

// NewMockFileHandler creates a new mock instance.
func NewMockFileHandler(ctrl *gomock.Controller) *MockFileHandler {
	mock := &MockFileHandler{ctrl: ctrl}
	mock.recorder = &MockFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileHandler) EXPECT() *MockFileHandlerMockRecorder {
	return m.recorder
}

// ClearFile mocks base method.
func (m *MockFileHandler) ClearFile(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearFile", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearFile indicates an expected call of ClearFile.
func (mr *MockFileHandlerMockRecorder) ClearFile(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearFile", reflect.TypeOf((*MockFileHandler)(nil).ClearFile), filename)
}

// Read mocks base method.
func (m *MockFileHandler) Read(filename string) (*collector.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", filename)
	ret0, _ := ret[0].(*collector.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileHandlerMockRecorder) Read(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileHandler)(nil).Read), filename)
}

// Restore mocks base method.
func (m *MockFileHandler) Restore(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockFileHandlerMockRecorder) Restore(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockFileHandler)(nil).Restore), filename)
}

// Write mocks base method.
func (m *MockFileHandler) Write(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockFileHandlerMockRecorder) Write(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFileHandler)(nil).Write), filename)
}
